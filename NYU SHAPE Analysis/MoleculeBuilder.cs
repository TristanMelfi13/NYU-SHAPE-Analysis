using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.Net.NetworkInformation;
using System.Security.AccessControl;
using System.Security.Authentication;
using System.Text;
using System.Threading.Tasks;

namespace NYU_SHAPE_Analysis
{
    internal class MoleculeBuilder
    {
        private Atom? Origin = null;

        private List<Residue> Residues = new List<Residue>();

        private LinkedList<Tuple<Residue, Residue>> Pairs = new LinkedList<Tuple<Residue, Residue>>();


        private Dictionary<string, double[]> InterNucleotideDistances = new Dictionary<string, double[]>()
        {
            ["O3'P"] = new double[] { -1.5429999999999993, 0.22799999999999976, 0.34999999999999964 }, // If what is coming in is NOT POP1... Then it is OP1P, but OP1P is not what it is... it is the inverse, but going POP1 is what it is
        };

        private Dictionary<string, double[]> DistancesForBuildingAdenine = new Dictionary<string, double[]>() // We already have r ? /// Angstroms[0], theta[1], phi[2]
        {
            ["POP1"] = new double[] { 0.44700002670288086, 1.2109999656677246, -0.7309999465942383 }, // If what is coming in is NOT POP1... Then it is OP1P, but OP1P is not what it is... it is the inverse, but going POP1 is what it is
            ["PO5'"] = new double[] { -1.441999912261963, -0.44100046157836914, -0.5570001602172852 },
            ["POP2"] = new double[] { -0.07500004768371582, 0.11299991607666016, 1.4770002365112305 },
            ["OP1P"] = new double[] { -0.44700002670288086, -1.2109999656677246, 0.7309999465942383 },
            ["O5'P"] = new double[] { 1.441999912261963, 0.44100046157836914, 0.5570001602172852 },
            ["O5'C5'"] = new double[] { -0.2070002555847168, -0.2349996566772461, -1.3839988708496094 },
            ["OP2P"] = new double[] { 0.07500004768371582, -0.11299991607666016, -1.4770002365112305 },
            ["C5'H5'"] = new double[] { 0.6750001907348633, -0.7890000343322754, -0.33100128173828125 },
            ["C5'H5''"] = new double[] { 0.13100004196166992, 0.9109997749328613, -0.5860004425048828 },
            ["C5'C4'"] = new double[] { -1.3680000305175781, -0.6319999694824219, -0.27700042724609375 },
            ["C5'O5'"] = new double[] { 0.2070002555847168, 0.2349996566772461, 1.3839988708496094 },
            ["H5'C5'"] = new double[] { -0.6750001907348633, 0.7890000343322754, 0.33100128173828125 },
            ["H5''C5'"] = new double[] { -0.13100004196166992, -0.9109997749328613, 0.5860004425048828 },
            ["C4'H4'"] = new double[] { -0.15700006484985352, -0.03000020980834961, -1.0780010223388672 },
            ["C4'C3'"] = new double[] { -1.1549997329711914, 0.7849998474121094, 0.6239995956420898 },
            ["C4'O4'"] = new double[] { -0.07699966430664062, -1.3350000381469727, 0.5049991607666016 },
            ["C4'C5'"] = new double[] { 1.3680000305175781, 0.6319999694824219, 0.27700042724609375 },
            ["H4'C4'"] = new double[] { 0.15700006484985352, 0.03000020980834961, 1.0780010223388672 },
            ["C3'O3'"] = new double[] { -0.3770003318786621, 1.0939998626708984, -0.824000358581543 },
            ["C3'H3'"] = new double[] { 0.29600000381469727, 0.34600019454956055, 0.9899997711181641 },
            ["C3'C2'"] = new double[] { -1.0620002746582031, -1.1010000705718994, 0.15700054168701172 },
            ["C3'C4'"] = new double[] { 1.1549997329711914, -0.7849998474121094, -0.6239995956420898 },
            ["O4'C4'"] = new double[] { 0.07699966430664062, 1.3350000381469727, -0.5049991607666016 },
            ["O4'C1'"] = new double[] { -1.2870001792907715, -0.21399998664855957, 0.5680007934570312 },
            ["C1'O4'"] = new double[] { 1.2870001792907715, 0.21399998664855957, -0.5680007934570312 },
            ["C1'H1'"] = new double[] { -0.4660000801086426, -0.8820000886917114, -0.4400005340576172 },
            ["C1'C2'"] = new double[] { -0.8530001640319824, 1.2329998016357422, -0.29199981689453125 },
            ["C1'N9"] = new double[] { 0.1230001449584961, -0.19800019264221191, 1.4679994583129883 },
            ["O3'C3'"] = new double[] { 0.3770003318786621, -1.0939998626708984, 0.824000358581543 },
            ["H3'C3'"] = new double[] { -0.29600000381469727, -0.34600019454956055, -0.9899997711181641 },
            ["C2'H2'"] = new double[] { -0.6139993667602539, 0.25300002098083496, 0.8629999160766602 },
            ["C2'C1'"] = new double[] { 0.8530001640319824, -1.2329998016357422, 0.29199981689453125 },
            ["C2'O2'"] = new double[] { -0.7239999771118164, -0.2089998722076416, -1.2119998931884766 },
            ["C2'C3'"] = new double[] { 1.0620002746582031, 1.1010000705718994, -0.15700054168701172 },
            ["H2'C2'"] = new double[] { 0.6139993667602539, -0.25300002098083496, -0.8629999160766602 },
            ["O2'HO2'"] = new double[] { -0.5310001373291016, 0.7839999198913574, -0.1569995880126953 },
            ["O2'C2'"] = new double[] { 0.7239999771118164, 0.2089998722076416, 1.2119998931884766 },
            ["HO2'O2'"] = new double[] { 0.5310001373291016, -0.7839999198913574, 0.1569995880126953 },
            ["H1'C1'"] = new double[] { 0.4660000801086426, 0.8820000886917114, 0.4400005340576172 },
            ["N9C4"] = new double[] { -0.9770002365112305, -0.531999945640564, 0.8170003890991211 },
            ["N9C8"] = new double[] { 1.0520000457763672, 0.2850000858306885, 0.8369998931884766 },
            ["N9C1'"] = new double[] { -0.1230001449584961, 0.19800019264221191, -1.4679994583129883 },
            ["C4C5"] = new double[] { 0.5170001983642578, -0.006999969482421875, 1.2699995040893555 },
            ["C4N3"] = new double[] { -1.2350001335144043, -0.4359999895095825, -0.37800025939941406 },
            ["C4N9"] = new double[] { 0.9770002365112305, 0.531999945640564, -0.8170003890991211 },
            ["C8N7"] = new double[] { -0.20800018310546875, -0.2969999313354492, 1.2590007781982422 },
            ["C8H8"] = new double[] { 0.9239997863769531, 0.43400001525878906, -0.3529996871948242 },
            ["C8N9"] = new double[] { -1.0520000457763672, -0.2850000858306885, -0.8369998931884766 },
            ["N7C8"] = new double[] { 0.20800018310546875, 0.2969999313354492, -1.2590007781982422 },
            ["N7C5"] = new double[] { -1.303999900817871, -0.5270000696182251, -0.009000778198242188 },
            ["H8C8"] = new double[] { -0.9239997863769531, -0.43400001525878906, 0.3529996871948242 },
            ["C5C6"] = new double[] { -0.8860001564025879, -0.5260000228881836, 0.9790000915527344 },
            ["C5C4"] = new double[] { -0.5170001983642578, 0.006999969482421875, -1.2699995040893555 },
            ["C5N7"] = new double[] { 1.303999900817871, 0.5270000696182251, 0.009000778198242188 },
            ["C6N1"] = new double[] { -1.2180004119873047, -0.43699997663497925, -0.32599925994873047 },
            ["C6N6"] = new double[] { 0.25799989700317383, -0.11699998378753662, 1.2890005111694336 },
            ["C6C5"] = new double[] { 0.8860001564025879, 0.5260000228881836, -0.9790000915527344 },
            ["N1C6"] = new double[] { 1.2180004119873047, 0.43699997663497925, 0.32599925994873047 },
            ["N1C2"] = new double[] { -0.35899925231933594, 0.07199996709823608, -1.2740001678466797 },
            ["N6H61"] = new double[] { -0.7079997062683105, -0.38999998569488525, 0.6059999465942383 },
            ["N6H62"] = new double[] { 0.8970003128051758, 0.3009999990463257, 0.3559999465942383 },
            ["N6C6"] = new double[] { -0.25799989700317383, 0.11699998378753662, -1.2890005111694336 },
            ["H61N6"] = new double[] { 0.7079997062683105, 0.38999998569488525, -0.6059999465942383 },
            ["H62N6"] = new double[] { -0.8970003128051758, -0.3009999990463257, -0.3559999465942383 },
            ["C2H2"] = new double[] { -0.9910001754760742, -0.35999998450279236, -0.23400020599365234 },
            ["C2N3"] = new double[] { 0.7109994888305664, 0.4620000123977661, -1.0270004272460938 },
            ["C2N1"] = new double[] { 0.35899925231933594, -0.07199996709823608, 1.2740001678466797 },
            ["H2C2"] = new double[] { 0.9910001754760742, 0.35999998450279236, 0.23400020599365234 },
            ["N3C4"] = new double[] { 1.2350001335144043, 0.4359999895095825, 0.37800025939941406 },
            ["N3C2"] = new double[] { -0.7109994888305664, -0.4620000123977661, 1.0270004272460938 }
        };

        private Dictionary<string, double[]> DistancesForBuildingUracil = new Dictionary<string, double[]>() 
        {
            ["POP1"] = new double[] { -0.978999137878418, -1.1089999675750732, 0.08999967575073242 },
            ["PO5'"] = new double[] { 0.048000335693359375, 0.5610001087188721, -1.5069999694824219 },
            ["POP2"] = new double[] { 1.385000228881836, -0.307999849319458, 0.430999755859375 },
            ["OP1P"] = new double[] { 0.978999137878418, 1.1089999675750732, -0.08999967575073242 },
            ["O5'P"] = new double[] { -0.048000335693359375, -0.5610001087188721, 1.5069999694824219 },
            ["O5'C5'"] = new double[] { -1.1850004196166992, 0.2330000400543213, -0.7450003623962402 },
            ["OP2P"] = new double[] { -1.385000228881836, 0.307999849319458, -0.430999755859375 },
            ["C5'H5'"] = new double[] { -0.5760002136230469, 0.8289999961853027, 0.4100003242492676 },
            ["C5'H5''"] = new double[] { -0.6089992523193359, -0.9040000438690186, -0.026000022888183594 },
            ["C5'C4'"] = new double[] { 0.29000091552734375, 0.35500001907348633, -1.4629993438720703 },
            ["C5'O5'"] = new double[] { 1.1850004196166992, -0.2330000400543213, 0.7450003623962402 },
            ["H5'C5'"] = new double[] { 0.5760002136230469, -0.8289999961853027, -0.4100003242492676 },
            ["H5''C5'"] = new double[] { 0.6089992523193359, 0.9040000438690186, 0.026000022888183594 },
            ["C4'H4'"] = new double[] { -0.944000244140625, 0.021999835968017578, -0.5460004806518555 },
            ["C4'C3'"] = new double[] { 0.9189996719360352, -1.0120000839233398, -0.689000129699707 },
            ["C4'O4'"] = new double[] { 0.6229991912841797, 1.275999903678894, -0.12600040435791016 },
            ["C4'C5'"] = new double[] { -0.29000091552734375, -0.35500001907348633, 1.4629993438720703 },
            ["H4'C4'"] = new double[] { 0.944000244140625, -0.021999835968017578, 0.5460004806518555 },
            ["C3'O3'"] = new double[] { -0.7239999771118164, -1.1549999713897705, -0.40000057220458984 },
            ["C3'H3'"] = new double[] { 0.8199996948242188, -0.25799989700317383, 0.6709995269775391 },
            ["C3'C2'"] = new double[] { 0.550999641418457, 0.8429999351501465, -1.1610002517700195 },
            ["C3'C4'"] = new double[] { -0.9189996719360352, 1.0120000839233398, 0.689000129699707 },
            ["O4'C4'"] = new double[] { -0.6229991912841797, -1.275999903678894, 0.12600040435791016 },
            ["O4'C1'"] = new double[] { 0.9430007934570312, -0.0679999589920044, -1.067000389099121 },
            ["C1'O4'"] = new double[] { -0.9430007934570312, 0.0679999589920044, 1.067000389099121 },
            ["C1'H1'"] = new double[] { -0.2200002670288086, 0.7709999680519104, -0.73699951171875 },
            ["C1'C2'"] = new double[] { -0.09600067138671875, -1.377000093460083, -0.6569995880126953 },
            ["C1'N1"] = new double[] { 1.3709993362426758, 0.21299993991851807, 0.5290002822875977 },
            ["O3'C3'"] = new double[] { 0.7239999771118164, 1.1549999713897705, 0.40000057220458984 },
            ["H3'C3'"] = new double[] { -0.8199996948242188, 0.25799989700317383, -0.6709995269775391 },
            ["C2'H2'"] = new double[] { 0.9680004119873047, -0.3680000305175781, -0.33899974822998047 },
            ["C2'C1'"] = new double[] { 0.09600067138671875, 1.377000093460083, 0.6569995880126953 },
            ["C2'O2'"] = new double[] { -0.9330005645751953, 0.08500003814697266, -1.079000473022461 },
            ["C2'C3'"] = new double[] { -0.550999641418457, -0.8429999351501465, 1.1610002517700195 },
            ["H2'C2'"] = new double[] { -0.9680004119873047, 0.3680000305175781, 0.33899974822998047 },
            ["O2'HO2'"] = new double[] { -0.042999267578125, -0.8629999160766602, -0.417999267578125 },
            ["O2'C2'"] = new double[] { 0.9330005645751953, -0.08500003814697266, 1.079000473022461 },
            ["HO2'O2'"] = new double[] { 0.042999267578125, 0.8629999160766602, 0.417999267578125 },
            ["H1'C1'"] = new double[] { 0.2200002670288086, -0.7709999680519104, 0.73699951171875 },
            ["N1C6"] = new double[] { 0.28999996185302734, -0.07599997520446777, 1.3450002670288086 },
            ["N1C2"] = new double[] { 1.0089998245239258, 0.2890000343322754, -0.9329996109008789 },
            ["N1C1'"] = new double[] { -1.3709993362426758, -0.21299993991851807, -0.5290002822875977 },
            ["C6H6"] = new double[] { -0.7839994430541992, -0.2200000286102295, 0.7079997062683105 },
            ["C6N1"] = new double[] { -0.28999996185302734, 0.07599997520446777, -1.3450002670288086 },
            ["C6C5"] = new double[] { 1.273000717163086, 0.20399999618530273, 0.4369997978210449 },
            ["C2O2"] = new double[] { -0.19299983978271484, 0.0820000171661377, -1.2130002975463867 },
            ["C2N3"] = new double[] { 1.268000602722168, 0.19999998807907104, 0.4790000915527344 },
            ["C2N1"] = new double[] { -1.0089998245239258, -0.2890000343322754, 0.9329996109008789 },
            ["O2C2"] = new double[] { 0.19299983978271484, -0.0820000171661377, 1.2130002975463867 },
            ["N3H3"] = new double[] { 0.7159996032714844, 0.2070000171661377, -0.6810007095336914 },
            ["N3C4"] = new double[] { 0.3709993362426758, -0.05799996852874756, 1.3199996948242188 },
            ["N3C2"] = new double[] { -1.268000602722168, -0.19999998807907104, -0.4790000915527344 },
            ["H3N3"] = new double[] { -0.7159996032714844, -0.2070000171661377, 0.6810007095336914 },
            ["C4O4"] = new double[] { 1.1740007400512695, 0.19999998807907104, 0.3020000457763672 },
            ["C4C5"] = new double[] { -1.0849990844726562, -0.3030000329017639, 0.9159998893737793 },
            ["C4N3"] = new double[] { -0.3709993362426758, 0.05799996852874756, -1.3199996948242188 },
            ["O4C4"] = new double[] { -1.1740007400512695, -0.19999998807907104, -0.3020000457763672 },
            ["C5H5"] = new double[] { 0.22299957275390625, -0.06099998950958252, 1.054999828338623 },
            ["C5C6"] = new double[] { -1.273000717163086, -0.20399999618530273, -0.4369997978210449 },
            ["C5C4"] = new double[] { 1.0849990844726562, 0.3030000329017639, -0.9159998893737793 },
            ["H5C5"] = new double[] { -0.22299957275390625, 0.06099998950958252, -1.054999828338623 },
            ["H6C6"] = new double[] { 0.7839994430541992, 0.2200000286102295, -0.7079997062683105 }

        };

        private Dictionary<string, double[]> DistancesForBuildingGuanine = new Dictionary<string, double[]>()
        {
            ["POP1"] = new double[] { 1.0590002536773682, 1.0309999585151672, 0.14699983596801758 },
            ["PO5'"] = new double[] { -0.4179999828338623, -0.11400008201599121, -1.550999641418457 },
            ["POP2"] = new double[] { -1.2379999160766602, 0.2120000123977661, 0.7890000343322754 },
            ["OP1P"] = new double[] { -1.0590002536773682, -1.0309999585151672, -0.14699983596801758 },
            ["O5'P"] = new double[] { 0.4179999828338623, 0.11400008201599121, 1.550999641418457 },
            ["O5'C5'"] = new double[] { 0.9590001106262207, 0.06400001049041748, -1.0460004806518555 },
            ["OP2P"] = new double[] { 1.2379999160766602, -0.2120000123977661, -0.7890000343322754 },
            ["C5'H5'"] = new double[] { 0.7290000915527344, -0.8040000200271606, 0.09300041198730469 },
            ["C5'H5''"] = new double[] { 0.5229997634887695, 0.956000030040741, 0.043999671936035156 },
            ["C5'C4'"] = new double[] { -0.6600000858306885, -0.06599998474121094, -1.3879995346069336 },
            ["C5'O5'"] = new double[] { -0.9590001106262207, -0.06400001049041748, 1.0460004806518555 },
            ["H5'C5'"] = new double[] { -0.7290000915527344, 0.8040000200271606, -0.09300041198730469 },
            ["H5''C5'"] = new double[] { -0.5229997634887695, -0.956000030040741, -0.043999671936035156 },
            ["C4'H4'"] = new double[] { 0.7819998264312744, 0.05900001525878906, -0.758000373840332 },
            ["C4'C3'"] = new double[] { -0.9839999675750732, 1.146000012755394, -0.24400043487548828 },
            ["C4'O4'"] = new double[] { -0.7249999046325684, -1.21399986743927, -0.194000244140625 },
            ["C4'C5'"] = new double[] { 0.6600000858306885, 0.06599998474121094, 1.3879995346069336 },
            ["H4'C4'"] = new double[] { -0.7819998264312744, -0.05900001525878906, 0.758000373840332 },
            ["C3'O3'"] = new double[] { 0.684999942779541, 1.1900000125169754, -0.3660001754760742 },
            ["C3'H3'"] = new double[] { -0.6010000705718994, 0.15700000524520874, 0.8959999084472656 },
            ["C3'C2'"] = new double[] { -0.8919999599456787, -0.5910000056028366, -1.1079998016357422 },
            ["C3'C4'"] = new double[] { 0.9839999675750732, -1.146000012755394, 0.24400043487548828 },
            ["O4'C4'"] = new double[] { 0.7249999046325684, 1.21399986743927, 0.194000244140625 },
            ["O4'C1'"] = new double[] { -1.1050000190734863, 0.27300000190734863, -0.8559999465942383 },
            ["C1'O4'"] = new double[] { 1.1050000190734863, -0.27300000190734863, 0.8559999465942383 },
            ["C1'H1'"] = new double[] { 0.10100007057189941, -0.5540001392364502, -0.9320001602172852 },
            ["C1'C2'"] = new double[] { -0.046000003814697266, 1.4959998726844788, -0.3020000457763672 },
            ["C1'N9"] = new double[] { -1.2549999952316284, -0.4120001792907715, 0.6619997024536133 },
            ["O3'C3'"] = new double[] { -0.684999942779541, -1.1900000125169754, 0.3660001754760742 },
            ["H3'C3'"] = new double[] { 0.6010000705718994, -0.15700000524520874, -0.8959999084472656 },
            ["C2'H2'"] = new double[] { -1.0250000357627869, 0.3530000150203705, 0.11899948120117188 },
            ["C2'C1'"] = new double[] { 0.046000003814697266, -1.4959998726844788, 0.3020000457763672 },
            ["C2'O2'"] = new double[] { 0.5490000247955322, 0.22699999809265137, -1.2980003356933594 },
            ["C2'C3'"] = new double[] { 0.8919999599456787, 0.5910000056028366, 1.1079998016357422 },
            ["H2'C2'"] = new double[] { 1.0250000357627869, -0.3530000150203705, -0.11899948120117188 },
            ["O2'HO2'"] = new double[] { -0.07899999618530273, 0.9390000104904175, -0.18200016021728516 },
            ["O2'C2'"] = new double[] { -0.5490000247955322, -0.22699999809265137, 1.2980003356933594 },
            ["HO2'O2'"] = new double[] { 0.07899999618530273, -0.9390000104904175, 0.18200016021728516 },
            ["H1'C1'"] = new double[] { -0.10100007057189941, 0.5540001392364502, 0.9320001602172852 },
            ["N9C8"] = new double[] { -0.2510000169277191, -0.19299983978271484, 1.3260002136230469 },
            ["N9C4"] = new double[] { -1.1949999928474426, -0.27499985694885254, -0.6470003128051758 },
            ["N9C1'"] = new double[] { 1.2549999952316284, 0.4120001792907715, -0.6619997024536133 },
            ["C8H8"] = new double[] { 0.7529999911785126, 0.1419999599456787, 0.7609996795654297 },
            ["C8N7"] = new double[] { -1.2240000069141388, -0.3690001964569092, 0.27299976348876953 },
            ["C8N9"] = new double[] { 0.2510000169277191, 0.19299983978271484, -1.3260002136230469 },
            ["C4C5"] = new double[] { -0.9010000824928284, -0.3450000286102295, 0.9890003204345703 },
            ["C4N3"] = new double[] { -0.2600000500679016, 0.0559999942779541, -1.3449993133544922 },
            ["C4N9"] = new double[] { 1.1949999928474426, 0.27499985694885254, 0.6470003128051758 },
            ["H8C8"] = new double[] { -0.7529999911785126, -0.1419999599456787, -0.7609996795654297 },
            ["N7C5"] = new double[] { -0.6210000514984131, -0.05799984931945801, -1.2569999694824219 },
            ["N7C8"] = new double[] { 1.2240000069141388, 0.3690001964569092, -0.27299976348876953 },
            ["C6O6"] = new double[] { -0.9470000267028809, -0.3320000171661377, 0.7089996337890625 },
            ["C6N1"] = new double[] { -0.22900009155273438, 0.06500005722045898, -1.3640003204345703 },
            ["C6C5"] = new double[] { 1.3499999046325684, 0.34400010108947754, 0.38899993896484375 },
            ["O6C6"] = new double[] { 0.9470000267028809, 0.3320000171661377, -0.7089996337890625 },
            ["N1H1"] = new double[] { -0.9240000247955322, -0.22900009155273438, -0.3359994888305664 },
            ["N1C2"] = new double[] { 0.9620001316070557, 0.3559999465942383, -0.8889999389648438 },
            ["N1C6"] = new double[] { 0.22900009155273438, -0.06500005722045898, 1.3640003204345703 },
            ["H1N1"] = new double[] { 0.9240000247955322, 0.22900009155273438, 0.3359994888305664 },
            ["C2N2"] = new double[] { -0.34800004959106445, 0.023000001907348633, -1.2599992752075195 },
            ["C2N3"] = new double[] { 1.2579998970031738, 0.32400012016296387, 0.3080005645751953 },
            ["C2N1"] = new double[] { -0.9620001316070557, -0.3559999465942383, 0.8889999389648438 },
            ["N2H21"] = new double[] { -0.943000078201294, -0.23799991607666016, -0.27100086212158203 },
            ["N2H22"] = new double[] { 0.6999999284744263, 0.26200008392333984, -0.6790008544921875 },
            ["N2C2"] = new double[] { 0.34800004959106445, -0.023000001907348633, 1.2599992752075195 },
            ["N3C2"] = new double[] { -1.2579998970031738, -0.32400012016296387, -0.3080005645751953 },
            ["N3C4"] = new double[] { 0.2600000500679016, -0.0559999942779541, 1.3449993133544922 },
            ["H21N2"] = new double[] { 0.943000078201294, 0.23799991607666016, 0.27100086212158203 },
            ["H22N2"] = new double[] { -0.6999999284744263, -0.26200008392333984, 0.6790008544921875 }

        };

        private Dictionary<string, double[]> DistancesForBuildingCytosine = new Dictionary<string, double[]>()
        {
            ["POP1"] = new double[] { -0.7189998626708984, -1.003000259399414, -0.8210000991821289 },
            ["PO5'"] = new double[] { 1.2940006256103516, 0.4980001449584961, -0.8090000152587891 },
            ["POP2"] = new double[] { 0.42100048065185547, -0.4370002746582031, 1.3530006408691406 },
            ["OP1P"] = new double[] { 0.7189998626708984, 1.003000259399414, 0.8210000991821289 },
            ["O5'P"] = new double[] { -1.2940006256103516, -0.4980001449584961, 0.8090000152587891 },
            ["O5'C5'"] = new double[] { -0.12200069427490234, 0.5449995994567871, -1.3050003051757812 },
            ["OP2P"] = new double[] { -0.42100048065185547, 0.4370002746582031, -1.3530006408691406 },
            ["C5'H5'"] = new double[] { -0.9449996948242188, 0.5340003967285156, -0.10199928283691406 },
            ["C5'H5''"] = new double[] { 0.01800060272216797, -0.8039999008178711, -0.73699951171875 },
            ["C5'C4'"] = new double[] { 1.1420001983642578, 0.9880003929138184, -0.2909984588623047 },
            ["C5'O5'"] = new double[] { 0.12200069427490234, -0.5449995994567871, 1.3050003051757812 },
            ["H5'C5'"] = new double[] { 0.9449996948242188, -0.5340003967285156, 0.10199928283691406 },
            ["H5''C5'"] = new double[] { -0.01800060272216797, 0.8039999008178711, 0.73699951171875 },
            ["C4'H4'"] = new double[] { -0.1680002212524414, 0.4439997673034668, -0.9810009002685547 },
            ["C4'C3'"] = new double[] { 1.377000331878662, -0.6680002212524414, -0.0110015869140625 },
            ["C4'O4'"] = new double[] { 0.062000274658203125, 1.055999755859375, 0.9589996337890625 },
            ["C4'C5'"] = new double[] { -1.1420001983642578, -0.9880003929138184, 0.2909984588623047 },
            ["H4'C4'"] = new double[] { 0.1680002212524414, -0.4439997673034668, 0.9810009002685547 },
            ["C3'O3'"] = new double[] { 0.25099992752075195, -0.6220002174377441, -1.253000259399414 },
            ["C3'H3'"] = new double[] { 0.06099987030029297, -0.7170000076293945, 0.819000244140625 },
            ["C3'C2'"] = new double[] { 0.9179997444152832, 1.2039999961853027, 0.28600120544433594 },
            ["C3'C4'"] = new double[] { -1.377000331878662, 0.6680002212524414, 0.0110015869140625 },
            ["O4'C4'"] = new double[] { -0.062000274658203125, -1.055999755859375, -0.9589996337890625 },
            ["O4'C1'"] = new double[] { 1.3660001754760742, 0.32700014114379883, 0.25099945068359375 },
            ["C1'O4'"] = new double[] { -1.3660001754760742, -0.32700014114379883, -0.25099945068359375 },
            ["C1'H1'"] = new double[] { 0.17299985885620117, 1.057999849319458, -0.1959991455078125 },
            ["C1'C2'"] = new double[] { 0.866999626159668, -0.8470001220703125, -0.9349994659423828 },
            ["C1'N1"] = new double[] { 0.33899974822998047, -0.2930002212524414, 1.4300003051757812 },
            ["O3'C3'"] = new double[] { -0.25099992752075195, 0.6220002174377441, 1.253000259399414 },
            ["H3'C3'"] = new double[] { -0.06099987030029297, 0.7170000076293945, -0.819000244140625 },
            ["C2'H2'"] = new double[] { 0.9409999847412109, -0.3060002326965332, 0.45599937438964844 },
            ["C2'C1'"] = new double[] { -0.866999626159668, 0.8470001220703125, 0.9349994659423828 },
            ["C2'O2'"] = new double[] { 0.22600030899047852, 0.7760000228881836, -1.1730003356933594 },
            ["C2'C3'"] = new double[] { -0.9179997444152832, -1.2039999961853027, -0.28600120544433594 },
            ["H2'C2'"] = new double[] { -0.9409999847412109, 0.3060002326965332, -0.45599937438964844 },
            ["O2'HO2'"] = new double[] { -0.005000114440917969, -0.5960001945495605, -0.7530002593994141 },
            ["O2'C2'"] = new double[] { -0.22600030899047852, -0.7760000228881836, 1.1730003356933594 },
            ["HO2'O2'"] = new double[] { 0.005000114440917969, 0.5960001945495605, 0.7530002593994141 },
            ["H1'C1'"] = new double[] { -0.17299985885620117, -1.057999849319458, 0.1959991455078125 },
            ["N1C2"] = new double[] { 1.2259998321533203, 0.46199989318847656, 0.5029993057250977 },
            ["N1C6"] = new double[] { -0.8439998626708984, -0.6970000267028809, 0.8249998092651367 },
            ["N1C1'"] = new double[] { -0.33899974822998047, 0.2930002212524414, -1.4300003051757812 },
            ["C2N3"] = new double[] { 0.3489999771118164, -0.23399972915649414, 1.2860002517700195 },
            ["C2O2"] = new double[] { 0.8029999732971191, 0.631000280380249, -0.6869993209838867 },
            ["C2N1"] = new double[] { -1.2259998321533203, -0.46199989318847656, -0.5029993057250977 },
            ["C6H6"] = new double[] { -0.9470005035400391, -0.35899972915649414, -0.3769998550415039 },
            ["C6C5"] = new double[] { 0.3429999351501465, -0.2389998435974121, 1.2860002517700195 },
            ["C6N1"] = new double[] { 0.8439998626708984, 0.6970000267028809, -0.8249998092651367 },
            ["N3C2"] = new double[] { -0.3489999771118164, 0.23399972915649414, -1.2860002517700195 },
            ["N3C4"] = new double[] { -0.8289999961853027, -0.6680002212524414, 0.7700004577636719 },
            ["O2C2"] = new double[] { -0.8029999732971191, -0.631000280380249, 0.6869993209838867 },
            ["C4N4"] = new double[] { 0.3710002899169922, -0.20300006866455078, 1.2299995422363281 },
            ["C4C5"] = new double[] { -1.246999740600586, -0.495999813079834, -0.4479999542236328 },
            ["C4N3"] = new double[] { 0.8289999961853027, 0.6680002212524414, -0.7700004577636719 },
            ["N4H41"] = new double[] { 0.8959999084472656, 0.3680000305175781, 0.28600025177001953 },
            ["N4H42"] = new double[] { -0.5999999046325684, -0.5069999694824219, 0.6350002288818359 },
            ["N4C4"] = new double[] { -0.3710002899169922, 0.20300006866455078, -1.2299995422363281 },
            ["C5H5"] = new double[] { -0.6710000038146973, -0.5490002632141113, 0.6449995040893555 },
            ["C5C6"] = new double[] { -0.3429999351501465, 0.2389998435974121, -1.2860002517700195 },
            ["C5C4"] = new double[] { 1.246999740600586, 0.495999813079834, 0.4479999542236328 },
            ["H41N4"] = new double[] { -0.8959999084472656, -0.3680000305175781, -0.28600025177001953 },
            ["H42N4"] = new double[] { 0.5999999046325684, 0.5069999694824219, -0.6350002288818359 },
            ["H5C5"] = new double[] { 0.6710000038146973, 0.5490002632141113, -0.6449995040893555 },
            ["H6C6"] = new double[] { 0.9470005035400391, 0.35899972915649414, 0.3769998550415039 }
        };

        private double[] AddCoordinates(double[] coord1, double[] coord2)
        {
            return new double[] { coord1[0] + coord2[0], coord1[1] + coord2[1], coord1[2] + coord2[2] };
        }


        public MoleculeBuilder() { }

        public LinkedList<Tuple<Residue, Residue>> GetWCPairs()
        {
            return Pairs;
        }

        public List<Residue> GetResidues()
        {
            return Residues;
        }        
        public Tuple<Residue, Residue> BuildWC(Residue r1, Residue r2)
        {
            double[] UH3AN1 = new double[] { 1.341, 1.138, -1.157 };
            double[] AN1UH3 = Invert(UH3AN1);
            double[] UO4 = new double[] { -9.961, -0.233, -7.807 };
            double[] AH61 = new double[] { -8.627, 0.712, -9.061 };
            double[] UO4AH61 = new double[] { AH61[0] - UO4[0], AH61[1] - UO4[1], AH61[2] - UO4[2] };
            double[] AH61UO4 = Invert(UO4AH61);

            double[] GH21CO2 = new double[] { -1.8660000000000005, -0.1549999999999998, -0.23399999999999999 };
            double[] CO2GH21 = Invert(GH21CO2);
            double[] GH1CN3 = new double[] { -1.725, -0.6500000000000004, -0.34500000000000064 };
            double[] CN3GH1 = Invert(GH1CN3);
            double[] GO6CH41 = new double[] { -1.4930000000000003, -0.9850000000000003, -0.46799999999999997 };
            double[] CH41GO6 = Invert(GO6CH41);





            Residue New1 = ConstructResidue(r1);
            Residue New2 = ConstructResidue(r2);

            if (New1.GetName().Contains("A") && New2.GetName().Contains("U"))
            {
                Atom N1 = New1.GetAtom("N1");
                Atom H3 = New2.GetAtom("H3");
                New1.AddAtom(N1.GetAtomName(), H3, AN1UH3); // A
                New2.AddAtom(H3.GetAtomName(), N1, UH3AN1); // U
                Atom H61 = New1.GetAtom("H61");
                Atom O4 = New2.GetAtom("O4");
                New1.AddAtom(H61.GetAtomName(), O4, AH61UO4); // A
                New2.AddAtom(O4.GetAtomName(), H61, UO4AH61); // U
            } else if (New1.GetName().Contains("U") && New2.GetName().Contains("A"))
            {
                Atom N1 = New2.GetAtom("N1");
                Atom H3 = New1.GetAtom("H3");
                New2.AddAtom(N1.GetAtomName(), H3, AN1UH3); // A
                New1.AddAtom(H3.GetAtomName(), N1, UH3AN1); // U
                Atom H61 = New2.GetAtom("H61");
                Atom O4 = New1.GetAtom("O4");
                New2.AddAtom(H61.GetAtomName(), O4, AH61UO4); // A
                New1.AddAtom(O4.GetAtomName(), H61, UO4AH61); // U
            }

            if (New1.GetName().Contains("G") && New2.GetName().Contains("C"))
            {
                Atom H21 = New1.GetAtom("H21");
                Atom O2 = New2.GetAtom("O2");
                New1.AddAtom(H21.GetAtomName(), O2, GH21CO2);
                New2.AddAtom(O2.GetAtomName(), H21, CO2GH21);

                Atom H1 = New1.GetAtom("H1");
                Atom N3 = New2.GetAtom("N3");
                New1.AddAtom(H1.GetAtomName(), N3, GH1CN3);
                New2.AddAtom(N3.GetAtomName(), H1, CN3GH1);

                Atom O6 = New1.GetAtom("O6");
                Atom H41 = New2.GetAtom("H41");
                New1.AddAtom(O6.GetAtomName(), H41, GO6CH41);
                New2.AddAtom(H41.GetAtomName(), O6, CH41GO6);

            } else if (New1.GetName().Contains("C") && New2.GetName().Contains("G"))
            {
                Atom H21 = New2.GetAtom("H21");
                Atom O2 = New1.GetAtom("O2");
                New2.AddAtom(H21.GetAtomName(), O2, GH21CO2);
                New1.AddAtom(O2.GetAtomName(), H21, CO2GH21);

                Atom H1 = New2.GetAtom("H1");
                Atom N3 = New1.GetAtom("N3");
                New2.AddAtom(H1.GetAtomName(), N3, GH1CN3);
                New1.AddAtom(N3.GetAtomName(), H1, CN3GH1);

                Atom O6 = New2.GetAtom("O6");
                Atom H41 = New1.GetAtom("H41");
                New2.AddAtom(O6.GetAtomName(), H41, GO6CH41);
                New1.AddAtom(H41.GetAtomName(), O6, CH41GO6);
            }

            var WCPair = new Tuple<Residue, Residue>(New1, New2);

            Pairs.AddLast(WCPair);
            return WCPair;
        }

        public static double[] CrossProduct(double[] v1, double[] v2)
        {
            return new double[] { (v1[1] * v2[2]) - (v1[2] * v2[1]), -((v1[0] * v2[2]) - (v1[2] * v2[0])), (v1[0] * v2[1]) - (v1[1] * v2[0]) };
        }


        public double[] GetSpherical(double[] Cartesian)
        {
            double r = Math.Sqrt(Math.Pow(Cartesian[0], 2) + Math.Pow(Cartesian[1], 2) + Math.Pow(Cartesian[2], 2));
            double theta = Math.Atan2(Cartesian[1], Cartesian[0]);
            double phi = Math.Acos(Cartesian[2] / r);

            return new double[] { r, theta, phi };
        }

        public double[] GetCartesian(double[] Spherical)
        {
            double x = Spherical[0] * Math.Sin(Spherical[1]) * Math.Cos(Spherical[2]);
            double y = Spherical[0] * Math.Sin(Spherical[1]) * Math.Sin(Spherical[2]);
            double z = Spherical[0] * Math.Cos(Spherical[1]);
            return new double[] { x, y, z };
        }

        public double SphericalDistance(double[] v1, double[] v2)
        {
            double Term1 = Math.Pow(v1[0], 2) + Math.Pow(v2[0], 2);
            double Term2 = (2 * (v1[0] * v2[0])) * ((Math.Sin(v1[1]) * Math.Sin(v2[1])) * Math.Cos(v1[2] - v2[2]));
            double Term3 = Math.Cos(v1[1]) * Math.Cos(v2[1]);
            return Math.Sqrt(Term1 - Term2 + Term3);
        }

        public void PushAll(Stack<Atom> CurrentStack, LinkedList<Atom> ToAdd)
        {
            foreach(Atom atom in ToAdd)
            {
                CurrentStack.Push(atom);
            }
        }


        // This method needs to be fixed... We'll do it later jus because we have to move on unfortunatley
        
        private Atom GetOrigin(Residue r1)
        {
            if (r1.GetName().Contains("A"))
            {
                return r1.GetAtom("N1");
            } else if (r1.GetName().Contains("U"))
            {
                return r1.GetAtom("H3");
            } else if (r1.GetName().Contains("G"))
            {
                return r1.GetAtom("H1");
            } else
            {
                return r1.GetAtom("N3");
            }


            throw new Exception("Meow meow Meow");
        }

        private double[] Invert(double[] coords)
        {
            return new double[] { -coords[0], -coords[1], -coords[2] };
        }

        private double[] SubtractCoords(double[] coords1, double[] coords2)
        {
            return new double[] { coords2[0] - coords1[0], coords2[1] - coords1[1], coords2[2] - coords1[2] };
        }


        public Residue ConstructResidue(Residue residue)
        {

            double[] ForCheck1 = new double[] { -9.395, 0.782, -11.282 };
            double[] ForCheck2 = new double[] { -10.616, -0.440, -10.246 };
            double[] Result = new double[] { ForCheck2[0] - ForCheck1[0], ForCheck2[1] - ForCheck1[1], ForCheck2[2] - ForCheck1[2] };
            double[] Result2 = new double[] { ForCheck1[0] - ForCheck2[0], ForCheck1[1] - ForCheck2[1], ForCheck1[2] - ForCheck2[2] };

            var ToBuild = new Residue(residue.GetName());
            var AlreadyVisited = new HashSet<string>(); // Check Permutations
            Stack<Atom> NeedToVisit = new Stack<Atom>();
            NeedToVisit.Push(GetOrigin(residue));
            while (NeedToVisit.Count() != 0)
            {
                var CurrentAtom = NeedToVisit.Pop();
                foreach (Atom atom in CurrentAtom.GetEdges())
                {
                    if (!AlreadyVisited.Contains(CurrentAtom.GetAtomName() + atom.GetAtomName()))
                    {
                        var Coordinates = GetCorrectRelativeCoordinates(residue.GetName(), CurrentAtom.GetAtomName(), atom.GetAtomName());
                        ToBuild.AddAtom(CurrentAtom.GetAtomName(), atom.GetAtomName(), Coordinates);
                        AlreadyVisited.Add(CurrentAtom.GetAtomName() + atom.GetAtomName());
                        PushAll(NeedToVisit, atom.GetEdges());
                    } else
                    {
                    }
                }
            }

            Residues.Add(ToBuild);

            return ToBuild;


        }

        private double[] GetCorrectRelativeCoordinates(string ResidueName, string Name1, string Name2)
        {

            string[] Permutations = new string[] { Name1 + Name2, Name2 + Name1 };

            Func<double[], double[]> Invert = (coords) =>  { return new double[] { -coords[0], -coords[1], -coords[2] }; };

            if (ResidueName.Contains("A"))
            {

                if (DistancesForBuildingAdenine.ContainsKey(Permutations[0]))
                {
                    return DistancesForBuildingAdenine[Permutations[0]];
                } else
                {
                    return Invert(DistancesForBuildingAdenine[Permutations[1]]);
                }

            }

            if (ResidueName.Contains("U"))
            {

                if (DistancesForBuildingUracil.ContainsKey(Permutations[0]))
                {
                    return DistancesForBuildingUracil[Permutations[0]];
                }
                else
                {
                    return Invert(DistancesForBuildingUracil[Permutations[1]]);
                }

            }

            if (ResidueName.Contains("G"))
            {

                if (DistancesForBuildingGuanine.ContainsKey(Permutations[0]))
                {
                    return DistancesForBuildingGuanine[Permutations[0]];
                }
                else
                {
                    return Invert(DistancesForBuildingGuanine[Permutations[1]]);
                }

            }

            if (ResidueName.Contains("C"))
            {

                if (DistancesForBuildingCytosine.ContainsKey(Permutations[0]))
                {
                    return DistancesForBuildingCytosine[Permutations[0]];
                }
                else
                {
                    return Invert(DistancesForBuildingCytosine[Permutations[1]]);
                }

            }



            throw new Exception();
        }


        private void RemoveDuplicates<T>(Queue<T> queue)
        {
            HashSet<T> seen = new HashSet<T>();
            Queue<T> uniqueQueue = new Queue<T>();

            while (queue.Count > 0)
            {
                T item = queue.Dequeue();
                if (seen.Add(item)) // Add returns false if the item was already in the set
                {
                    uniqueQueue.Enqueue(item);
                }
            }

            // Copy the unique items back into the original queue
            while (uniqueQueue.Count > 0)
            {
                queue.Enqueue(uniqueQueue.Dequeue());
            }
        }

        private void PushQueue(Queue<Atom> NextToCompute, LinkedList<Atom> PotentiallyAdd, Dictionary<Atom, double[]> CoordinateWorld)
        {
            foreach (var atom in PotentiallyAdd)
            {
                if (!CoordinateWorld.ContainsKey(atom))
                {
                    NextToCompute.Enqueue(atom);
                }
            }
            RemoveDuplicates(NextToCompute);
        }

        public string[] PullMostRecentCoordinates(Atom atom, Dictionary<Atom, double[]> CoordinateWorld) 
        {
            foreach (var neighbor in atom.GetEdges())
            {
                if (CoordinateWorld.ContainsKey(neighbor))
                {
                    return new string[] { neighbor.GetAtomName(), CoordinateWorld[neighbor][0].ToString(), CoordinateWorld[neighbor][1].ToString(), CoordinateWorld[neighbor][2].ToString() };   
                }
            }
            throw new Exception("Hmm something went wrong... " + atom.GetAtomName() + " Had no alr added parents "); 
        }


        public void PrintCoordinateWorld(Dictionary<Atom, double[]> CoordinateWorld)
        {
            int count = 0;
            foreach (var kvp in CoordinateWorld)
            {
                if (count == 0)
                {
                    Console.WriteLine("Origin: " + kvp.Key.GetAtomName() + " --Coordinates--> [" + string.Join(", ", kvp.Value) + "] ");
                    count++;
                }
                else
                {
                    Console.Write(kvp.Key.GetNucleotideName() + "" + kvp.Key.GetAtomName() + ": "); 
                    var Coordinates = kvp.Value;
                    foreach (double d in Coordinates)
                    {
                        Console.Write(Math.Round(d, 2) + "  ");
                    }
                    Console.Write(CheckMagnitude(Coordinates, new double[] { 0, 0, 0 } ) + " \n");
                }

            }

        }



        public Dictionary<Atom, double[]> BuildSingleResidueCoordinates(Residue ToStart)
        {
            var CoordinateWorld = new Dictionary<Atom, double[]>();
            Func<Residue, string> GetOrigin = (r1) =>
            {
                if (r1.GetName().Contains("A"))
                {
                    return "N1";
                } else if (r1.GetName().Contains("U"))
                {
                    return "H3";
                }
                else if (r1.GetName().Contains("G"))
                {
                    return "H1";
                } else
                {
                    return "N3";
                }

            };
            Func<double[], double[], double[]> AddCoordinates = (coord1, coord2) => { return new double[] { coord1[0] + coord2[0], coord1[1] + coord2[1], coord1[2] + coord2[2] }; };
            CoordinateWorld.Add(ToStart.GetAtom(GetOrigin(ToStart)), new double[] { 0, 0, 0 });
            Queue<Atom> NextToCompute = new Queue<Atom>(ToStart.GetAtom(GetOrigin(ToStart)).GetEdges());            
            while (NextToCompute.Count() != 0)
            {
                var CurrentAtom = NextToCompute.Dequeue();
                var ParentInfo = PullMostRecentCoordinates(CurrentAtom, CoordinateWorld);
                var Parent = ToStart.GetAtom(ParentInfo[0]);
                var ParentCoords = new double[] { double.Parse(ParentInfo[1]), double.Parse(ParentInfo[2]), double.Parse(ParentInfo[3]) };
                if (ToStart.CheckPair(ParentInfo[0] + CurrentAtom.GetAtomName()))
                {
                    var Displacement = ToStart.GetBondWeight(ParentInfo[0] + CurrentAtom.GetAtomName());
                    var UpdatedCoordinates = AddCoordinates(ParentCoords, Displacement);
                    CoordinateWorld.Add(CurrentAtom, UpdatedCoordinates);
                    PushQueue(NextToCompute, CurrentAtom.GetEdges(), CoordinateWorld);
                }
            }
            return CoordinateWorld;
        }


        private void UnitVector(double[] v1, double Mag)
        {
            v1[0] = v1[0] / Mag;
            v1[1] = v1[1] / Mag;
            v1[2] = v1[2] / Mag;


        }
        private void MapToWholeNumber(double[] input)
        {

            for (int i = 0; i < input.Length; i++)
            {
                if (input[i] > 0)
                {
                    input[i] = 1;
                }
                else
                {
                    input[i] = -1;
                }
            }

        }
        

        private void CompareAndSwap(double[] ToFix, double[] ToCompTo)
        {
            Func<double, double, double> MakeSwaps = (input, compare) => 
            { 
                if ((input > 0 && compare < 0) || (input < 0 && compare > 0))
                {
                    return -input;
                } else
                {
                    return input;
                }
            
            };

            for (int i = 0; i < ToFix.Length; i++)
            {
                ToFix[i] = MakeSwaps(ToFix[i], ToCompTo[i]);
            }

        }

        private void ScaleVector(double[] input, double Scalar)
        {
            for (int i = 0; i < input.Length; i++)
            {
                input[i] *= Scalar;
            }
        }




        public void BuildPhosphoDiesterCoordinates(Tuple<Residue, Residue> Pair)
        {
            var CoordinatesResi1 = BuildSingleResidueCoordinates(Pair.Item1);

            var OP2 = CoordinatesResi1[Pair.Item1.GetAtom("OP2")];
            var O5 = CoordinatesResi1[Pair.Item1.GetAtom("O5'")];
            var OP1 = CoordinatesResi1[Pair.Item1.GetAtom("OP1")];

            var OP2O5 = SubtractCoords(OP2, O5);
            var OP2OP1 = SubtractCoords(OP2, OP1);

            var NormalVector = CrossProduct(OP2O5, OP2OP1);

            UnitVector(NormalVector, CheckMagnitude(NormalVector, new double[] { 0, 0, 0 }));
            var ForEnsuringDirection = SubtractCoords(CoordinatesResi1[Pair.Item1.GetAtom("H5'")], CoordinatesResi1[Pair.Item1.GetAtom("C5'")]);
            MapToWholeNumber(ForEnsuringDirection);

            CompareAndSwap(NormalVector, ForEnsuringDirection);
            
            ScaleVector(NormalVector, 1.6);







        }




        public Dictionary<Atom, double[]> BuildWCCoordinates(Tuple<Residue, Residue> Pair)
        {
            Console.WriteLine(Pair.Item1.GetName());

            Func<Residue, Tuple<Atom, Atom>> GetCoordinatesForBearing = (r1) =>
            {
                if (r1.GetName().Contains("A"))
                {
                    return new Tuple<Atom, Atom>(r1.GetAtom("C4"), r1.GetAtom("N1"));
                }
                else if (r1.GetName().Contains("U")) 
                {
                    return new Tuple<Atom, Atom>(r1.GetAtom(""), r1.GetAtom("SS"));
                }
                else
                {
                    throw new Exception("Meow meow meow");
                }
            };

            Func<double[], double[], double[]> GetBearings = (v1, v2) =>
            {
                var DirectionVector = new double[] { v2[0] - v1[0], v2[1] - v1[1], v2[2] - v1[2] };
                var Mag = CheckMagnitude(DirectionVector, new double[] { 0, 0, 0 });
                UnitVector(DirectionVector, Mag);
                return DirectionVector;
            };

            double HBondDistance = 2.0;

            var CoordinatesResi1 = BuildSingleResidueCoordinates(Pair.Item1);
            var CoordinatesResi2 = BuildSingleResidueCoordinates(Pair.Item2);


            var ForBearings = GetCoordinatesForBearing(Pair.Item1);
            var DirectionToPushPairIn = (GetBearings(CoordinatesResi1[ForBearings.Item1], CoordinatesResi1[ForBearings.Item2]));

            var Slide = new double[] { HBondDistance * DirectionToPushPairIn[0], HBondDistance * DirectionToPushPairIn[1], HBondDistance * DirectionToPushPairIn[2] };
            foreach (var kvp in CoordinatesResi2)
            {
                CoordinatesResi1.Add(kvp.Key, AddCoordinates(kvp.Value, Slide));
            }

            return CoordinatesResi1;

        }
        private double CheckMagnitude(double[] v1, double[] v2)
        {
            double[] meow = SubtractCoords(v1, v2);
            return Math.Sqrt(Math.Pow(meow[0], 2) + Math.Pow(meow[1], 2) + Math.Pow(meow[2], 2));
        }
        public void PrintList()
        {
            foreach (Residue r in Residues)
            {
                Console.WriteLine(r.GetName());
            }
        }

        private int GetJusResiNumber(string str)
        {
            LinkedList<string> ToReturn = new LinkedList<string>();
            foreach (char c in str)
            {
                if (char.IsLetter(c))
                {
                    return int.Parse(string.Join("", ToReturn));
                }
                else
                {
                    ToReturn.AddLast(c.ToString());
                }
            }
            throw new Exception("This should never have failed what did you input?");
        }

        private void GetCorrectNormalVector(Residue residue, int MiddleResiNumber, Dictionary<Atom, double[]> Coordinates)
        {

            double O3Angle = 120 * (Math.PI / 180.0); // Add some randomness to this later
            double O3PDistance = 1.6;
            var ResiNumber = GetJusResiNumber(residue.GetName());
            if (ResiNumber < MiddleResiNumber)
            {
                Console.WriteLine(residue.GetName());
                var AtomForNormal = residue.GetAtom("O3'");
                var C3O3 = SubtractCoords(Coordinates[residue.GetAtom("C3'")], Coordinates[residue.GetAtom("O3'")]);
                var C3H3 = SubtractCoords(Coordinates[residue.GetAtom("C3'")], Coordinates[residue.GetAtom("H3'")]);

                var C4O4 = SubtractCoords(Coordinates[residue.GetAtom("O4'")], Coordinates[residue.GetAtom("C4'")]);
                ScaleVector(C4O4, 2.6);
                var Normal = CrossProduct(C3O3, C3H3);
                var ForEnsuringDirection = SubtractCoords(Coordinates[residue.GetAtom("C1'")], Coordinates[residue.GetAtom("C3'")]);
                CompareAndSwap(Normal, ForEnsuringDirection);
                ScaleVector(Normal, 1.6);

            } else
            {
                var AtomForNormal = residue.GetAtom("P");
            }
        }

        private double ApproximateHairpin(double Circumference)
        {
            return (Circumference / Math.PI) / 2;
        }

        private Residue GetEndToStartFrom(Tuple<Residue, Residue, Residue> Threeple)
        {
            var ForSorting = new Dictionary<int, Residue>();
            int min = 100;
            ForSorting.Add(GetJusResiNumber(Threeple.Item1.GetName()), Threeple.Item1);
            ForSorting.Add(GetJusResiNumber(Threeple.Item2.GetName()), Threeple.Item2);
            ForSorting.Add(GetJusResiNumber(Threeple.Item3.GetName()), Threeple.Item3);

            foreach (var kvp in ForSorting)
            {
                if (kvp.Key < min)
                {
                    min = kvp.Key;
                }
            }
            return ForSorting[min];
        }

        private void ApplyScalar(double[] ToTransform, double Scalar)
        {
            for (int i = 0; i < ToTransform.Length; i++)
            {
                ToTransform[i] *= Scalar;
            }
        }
        
        private double Magnitude(double[] v)
        {
            return Math.Sqrt(Math.Pow(v[0], 2) + Math.Pow(v[1], 2) + Math.Pow(v[2], 2));
        }

        private double GetRepulsiveTerms(double ApproxRadius, double[] Coords)
        {
            return  (ApproxRadius - Magnitude(Coords)) / Math.Pow(Magnitude(Coords), 1.85);
        }


        public void EventuallyWillBeAReallyCoolMethod(Tuple<Residue, Residue, Residue> Threeple, double HairpinCount)
        {
            double Circumference = 1.25 * (8.9 * HairpinCount); // Should experiment with other values for this scale thing
            double ApproximateRadius = ApproximateHairpin(Circumference);
            var ToBuildFrom = GetEndToStartFrom(Threeple);
            
            var ToBuildFromCoordinates = BuildSingleResidueCoordinates(ToBuildFrom);
            var C3O3First = SubtractCoords(ToBuildFromCoordinates[ToBuildFrom.GetAtom("C3'")], ToBuildFromCoordinates[ToBuildFrom.GetAtom("O3'")]); // Says where to put the next coordinate

            var RepusliveTerms = GetRepulsiveTerms(ApproximateRadius, ToBuildFromCoordinates[ToBuildFrom.GetAtom("O3'")]);
            
            Console.WriteLine(RepusliveTerms);
            Console.WriteLine(Magnitude(new double[] { RepusliveTerms, RepusliveTerms, RepusliveTerms }));


            // When C3'P in the Dictionary says where to put the next nucleotide ideally... Now we have to offput that with our vectors
            // The distance from where we are building to the center is from origin to each point in the backbone?
        }
    }
}
